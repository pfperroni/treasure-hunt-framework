<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Treasure Hunt: src/TH/ReinforcementLearningSearchAlgorithmSelectionPolicy.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TH-logo-2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Treasure Hunt
   </div>
   <div id="projectbrief">Treasure Hunt Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_c1f8c841dbb68f6f1ba9638c450c5e03.xhtml">TH</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ReinforcementLearningSearchAlgorithmSelectionPolicy.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifndef REINFORCEMENTLEARNINGSEARCHALGORITHMSELECTIONPOLICY_H_</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#define REINFORCEMENTLEARNINGSEARCHALGORITHMSELECTIONPOLICY_H_</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="SearchAlgorithmSelectionPolicy_8h.xhtml">TH/SearchAlgorithmSelectionPolicy.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> P = <span class="keywordtype">double</span>, <span class="keywordtype">int</span> pSize = 1, <span class="keyword">class</span> F = <span class="keywordtype">double</span>, <span class="keywordtype">int</span> fSize = 1, <span class="keyword">class</span> V = <span class="keywordtype">double</span>, <span class="keywordtype">int</span> vSize = 1&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml">   36</a></span>&#160;<span class="keyword">class </span><a class="code" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml">ReinforcementLearningSearchAlgorithmSelectionPolicy</a> : <span class="keyword">public</span> <a class="code" href="classSearchAlgorithmSelectionPolicy.xhtml">SearchAlgorithmSelectionPolicy</a>&lt;P, pSize, F, fSize, V, vSize&gt; {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">double</span> prevFit;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">int</span> startupSeq;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> seed;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* getAlgorithm(vector&lt;<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>*&gt;* algorithms, <span class="keyword">const</span> <span class="keywordtype">char</span> *algName) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">for</span>(<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* ss : *algorithms) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">if</span>(strcmp(ss-&gt;getSearchAlgorithm()-&gt;getName(), algName) == 0){</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                <span class="keywordflow">return</span> ss;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a2749d93ae5cbefdfc9aedca07bfe51ce">   52</a></span>&#160;    <a class="code" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a2749d93ae5cbefdfc9aedca07bfe51ce">ReinforcementLearningSearchAlgorithmSelectionPolicy</a>() {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        prevFit = DBL_MAX;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        startupSeq = 0;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        seed = <a class="code" href="classTHUtil.xhtml#ac88c9d3a82da43e5afc2cb063d2579ec">THUtil::getRandomSeed</a>();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a391b7a37c4aa59b58e344d1452dffae1">   57</a></span>&#160;    <a class="code" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a391b7a37c4aa59b58e344d1452dffae1">~ReinforcementLearningSearchAlgorithmSelectionPolicy</a>() {}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a90a40b83202cab6aee7c547d51f40105">   59</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a90a40b83202cab6aee7c547d51f40105">rank</a>(</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordtype">int</span> ID, <a class="code" href="classTHTree.xhtml">THTree</a> *tree, vector&lt;<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>*&gt;* algorithms,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <a class="code" href="classSearch.xhtml">Search&lt;P, pSize, F, fSize, V, vSize&gt;</a>* currAlg, <a class="code" href="structFitness.xhtml">Fitness&lt;F, fSize&gt;</a> *currFitness,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordtype">int</span> currentNEvals, <span class="keywordtype">long</span> <span class="keywordtype">long</span> nTotalEvals) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span>(algorithms == NULL || algorithms-&gt;size() == 0) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;The list of algorithms is empty.&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span>(startupSeq &lt; (<span class="keywordtype">int</span>)algorithms-&gt;size() + 1) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* scoreCurrAlg = getAlgorithm(algorithms, currAlg-&gt;<a class="code" href="classSearch.xhtml#afbc425366989c9fc8aa7c88b70812b97">getName</a>());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordtype">double</span> sum = 0;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// If there was no improvement, impose penalty based on the number of evaluations wasted on this run.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">if</span>(prevFit - currFitness-&gt;<a class="code" href="structFitness.xhtml#ac6513eb1ca76f5618cbc0a2f4e25139c">getFirstValue</a>() == 0) {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">for</span>(<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* ss : *algorithms) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                sum += ss-&gt;getScore();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            scoreCurrAlg-&gt;<a class="code" href="classSearchScore.xhtml#a9157d1aa13189eece5b1321c08316220">setScore</a>(max(scoreCurrAlg-&gt;<a class="code" href="classSearchScore.xhtml#a909350808e091d0f75d43bbf08f6db29">getScore</a>() - (sum / nTotalEvals) * currentNEvals, 1e-6));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">else</span> {  <span class="comment">// Score based on the percentual of improvement for every fitness evaluation.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            scoreCurrAlg-&gt;<a class="code" href="classSearchScore.xhtml#a9157d1aa13189eece5b1321c08316220">setScore</a>(max(scoreCurrAlg-&gt;<a class="code" href="classSearchScore.xhtml#a909350808e091d0f75d43bbf08f6db29">getScore</a>() + ((prevFit - currFitness-&gt;<a class="code" href="structFitness.xhtml#ac6513eb1ca76f5618cbc0a2f4e25139c">getFirstValue</a>()) / prevFit) / currentNEvals, 1e-6));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        prevFit = currFitness-&gt;<a class="code" href="structFitness.xhtml#ac6513eb1ca76f5618cbc0a2f4e25139c">getFirstValue</a>();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="comment">//cout &lt;&lt; currAlg-&gt;getName() &lt;&lt; &quot; = &quot; &lt;&lt; scoreCurrAlg-&gt;getScore() &lt;&lt; endl;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a4bd477b9e70030b13bc214cec3fa71d1">   86</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classSearch.xhtml">Search&lt;P, pSize, F, fSize, V, vSize&gt;</a>* <a class="code" href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a4bd477b9e70030b13bc214cec3fa71d1">apply</a>(</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordtype">int</span> ID, <a class="code" href="classTHTree.xhtml">THTree</a> *tree, vector&lt;<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>*&gt;* algorithms) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">if</span>(algorithms == NULL || algorithms-&gt;size() == 0) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;The list of algorithms is empty.&quot;</span>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <a class="code" href="classSearch.xhtml">Search&lt;P, pSize, F, fSize, V, vSize&gt;</a>* chosenAlg = NULL;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordtype">int</span> nAlgs = algorithms-&gt;size();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">if</span>(startupSeq &lt; 2*nAlgs + 1) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            chosenAlg = algorithms-&gt;at(startupSeq % nAlgs)-&gt;getSearchAlgorithm();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            startupSeq++;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// Roulette wheel.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordtype">double</span> sum = 0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">for</span>(<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* ss : *algorithms) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                sum += ss-&gt;getScore() + (1 / ss-&gt;getDeprecation());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordtype">double</span> r = <a class="code" href="classTHUtil.xhtml#ad95b7150adaf4d576de406c8e7b8142c">THUtil::randUniformDouble</a>(seed, 0, sum);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            sum = 0;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">for</span>(<a class="code" href="classSearchScore.xhtml">SearchScore&lt;P, pSize, F, fSize, V, vSize&gt;</a>* ss : *algorithms) {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                sum += ss-&gt;getScore() + (1 / ss-&gt;getDeprecation());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">if</span> (chosenAlg == NULL &amp;&amp; r &lt;= sum) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    chosenAlg = ss-&gt;getSearchAlgorithm();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    ss-&gt;setDeprecation(1);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">else</span> ss-&gt;setDeprecation(ss-&gt;getDeprecation()+1);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span>(chosenAlg == NULL) chosenAlg = algorithms-&gt;at(0)-&gt;<a class="code" href="classSearchScore.xhtml#a4a3bd7e51e9de5c7ff2ae9cf4b64d13d">getSearchAlgorithm</a>();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> chosenAlg;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">//      if(tree-&gt;getNode(ID)-&gt;isLeaf()) return getAlgorithm(algorithms, &quot;HillClimbing&quot;);</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">//      return getAlgorithm(algorithms, &quot;LSHADE&quot;);</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;};</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* REINFORCEMENTLEARNINGSEARCHALGORITHMSELECTIONPOLICY_H_ */</span><span class="preprocessor"></span></div><div class="ttc" id="structFitness_xhtml"><div class="ttname"><a href="structFitness.xhtml">Fitness</a></div><div class="ttdoc">This structure represents the fitness (or cost) of one Solution. </div><div class="ttdef"><b>Definition:</b> <a href="Fitness_8h_source.xhtml#l00037">Fitness.h:37</a></div></div>
<div class="ttc" id="classReinforcementLearningSearchAlgorithmSelectionPolicy_xhtml_a391b7a37c4aa59b58e344d1452dffae1"><div class="ttname"><a href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a391b7a37c4aa59b58e344d1452dffae1">ReinforcementLearningSearchAlgorithmSelectionPolicy::~ReinforcementLearningSearchAlgorithmSelectionPolicy</a></div><div class="ttdeci">~ReinforcementLearningSearchAlgorithmSelectionPolicy()</div><div class="ttdef"><b>Definition:</b> <a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h_source.xhtml#l00057">ReinforcementLearningSearchAlgorithmSelectionPolicy.h:57</a></div></div>
<div class="ttc" id="classTHUtil_xhtml_ad95b7150adaf4d576de406c8e7b8142c"><div class="ttname"><a href="classTHUtil.xhtml#ad95b7150adaf4d576de406c8e7b8142c">THUtil::randUniformDouble</a></div><div class="ttdeci">static double randUniformDouble(unsigned int &amp;seed, double a, double b)</div><div class="ttdef"><b>Definition:</b> <a href="THUtil_8h_source.xhtml#l00148">THUtil.h:148</a></div></div>
<div class="ttc" id="classTHUtil_xhtml_ac88c9d3a82da43e5afc2cb063d2579ec"><div class="ttname"><a href="classTHUtil.xhtml#ac88c9d3a82da43e5afc2cb063d2579ec">THUtil::getRandomSeed</a></div><div class="ttdeci">static unsigned int getRandomSeed()</div><div class="ttdoc">Get a random seed. </div><div class="ttdef"><b>Definition:</b> <a href="THUtil_8h_source.xhtml#l00050">THUtil.h:50</a></div></div>
<div class="ttc" id="structFitness_xhtml_ac6513eb1ca76f5618cbc0a2f4e25139c"><div class="ttname"><a href="structFitness.xhtml#ac6513eb1ca76f5618cbc0a2f4e25139c">Fitness::getFirstValue</a></div><div class="ttdeci">F getFirstValue()</div><div class="ttdoc">Get the first value from the list of values that represents the Fitness. </div><div class="ttdef"><b>Definition:</b> <a href="Fitness_8h_source.xhtml#l00183">Fitness.h:183</a></div></div>
<div class="ttc" id="classReinforcementLearningSearchAlgorithmSelectionPolicy_xhtml_a2749d93ae5cbefdfc9aedca07bfe51ce"><div class="ttname"><a href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a2749d93ae5cbefdfc9aedca07bfe51ce">ReinforcementLearningSearchAlgorithmSelectionPolicy::ReinforcementLearningSearchAlgorithmSelectionPolicy</a></div><div class="ttdeci">ReinforcementLearningSearchAlgorithmSelectionPolicy()</div><div class="ttdef"><b>Definition:</b> <a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h_source.xhtml#l00052">ReinforcementLearningSearchAlgorithmSelectionPolicy.h:52</a></div></div>
<div class="ttc" id="classSearchScore_xhtml_a4a3bd7e51e9de5c7ff2ae9cf4b64d13d"><div class="ttname"><a href="classSearchScore.xhtml#a4a3bd7e51e9de5c7ff2ae9cf4b64d13d">SearchScore::getSearchAlgorithm</a></div><div class="ttdeci">Search&lt; P, pSize, F, fSize, V, vSize &gt; * getSearchAlgorithm()</div><div class="ttdef"><b>Definition:</b> <a href="SearchScore_8h_source.xhtml#l00096">SearchScore.h:96</a></div></div>
<div class="ttc" id="classSearch_xhtml_afbc425366989c9fc8aa7c88b70812b97"><div class="ttname"><a href="classSearch.xhtml#afbc425366989c9fc8aa7c88b70812b97">Search::getName</a></div><div class="ttdeci">virtual const char * getName()=0</div><div class="ttdoc">Get the name of the optimization method implemented. </div></div>
<div class="ttc" id="classTHTree_xhtml"><div class="ttname"><a href="classTHTree.xhtml">THTree</a></div><div class="ttdoc">Treasure Hunt Tree Topology. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00107">THTree.h:107</a></div></div>
<div class="ttc" id="classSearchScore_xhtml_a909350808e091d0f75d43bbf08f6db29"><div class="ttname"><a href="classSearchScore.xhtml#a909350808e091d0f75d43bbf08f6db29">SearchScore::getScore</a></div><div class="ttdeci">double getScore()</div><div class="ttdef"><b>Definition:</b> <a href="SearchScore_8h_source.xhtml#l00068">SearchScore.h:68</a></div></div>
<div class="ttc" id="classReinforcementLearningSearchAlgorithmSelectionPolicy_xhtml_a90a40b83202cab6aee7c547d51f40105"><div class="ttname"><a href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a90a40b83202cab6aee7c547d51f40105">ReinforcementLearningSearchAlgorithmSelectionPolicy::rank</a></div><div class="ttdeci">virtual void rank(int ID, THTree *tree, vector&lt; SearchScore&lt; P, pSize, F, fSize, V, vSize &gt; * &gt; *algorithms, Search&lt; P, pSize, F, fSize, V, vSize &gt; *currAlg, Fitness&lt; F, fSize &gt; *currFitness, int currentNEvals, long long nTotalEvals)</div><div class="ttdoc">Rank the performance of the Search instance previously executed. </div><div class="ttdef"><b>Definition:</b> <a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h_source.xhtml#l00059">ReinforcementLearningSearchAlgorithmSelectionPolicy.h:59</a></div></div>
<div class="ttc" id="classReinforcementLearningSearchAlgorithmSelectionPolicy_xhtml_a4bd477b9e70030b13bc214cec3fa71d1"><div class="ttname"><a href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml#a4bd477b9e70030b13bc214cec3fa71d1">ReinforcementLearningSearchAlgorithmSelectionPolicy::apply</a></div><div class="ttdeci">virtual Search&lt; P, pSize, F, fSize, V, vSize &gt; * apply(int ID, THTree *tree, vector&lt; SearchScore&lt; P, pSize, F, fSize, V, vSize &gt; * &gt; *algorithms)</div><div class="ttdoc">Choose the next optimization algorithm to be executed. </div><div class="ttdef"><b>Definition:</b> <a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h_source.xhtml#l00086">ReinforcementLearningSearchAlgorithmSelectionPolicy.h:86</a></div></div>
<div class="ttc" id="classSearchAlgorithmSelectionPolicy_xhtml"><div class="ttname"><a href="classSearchAlgorithmSelectionPolicy.xhtml">SearchAlgorithmSelectionPolicy</a></div><div class="ttdoc">Template to select the next optimization method to be executed and rank it after execution. </div><div class="ttdef"><b>Definition:</b> <a href="SearchAlgorithmSelectionPolicy_8h_source.xhtml#l00041">SearchAlgorithmSelectionPolicy.h:41</a></div></div>
<div class="ttc" id="classReinforcementLearningSearchAlgorithmSelectionPolicy_xhtml"><div class="ttname"><a href="classReinforcementLearningSearchAlgorithmSelectionPolicy.xhtml">ReinforcementLearningSearchAlgorithmSelectionPolicy</a></div><div class="ttdoc">This class implements the algorithm selection policy through reinforcement learning. </div><div class="ttdef"><b>Definition:</b> <a href="ReinforcementLearningSearchAlgorithmSelectionPolicy_8h_source.xhtml#l00036">ReinforcementLearningSearchAlgorithmSelectionPolicy.h:36</a></div></div>
<div class="ttc" id="classSearchScore_xhtml"><div class="ttname"><a href="classSearchScore.xhtml">SearchScore</a></div><div class="ttdoc">This class stores a Search instance and its score. </div><div class="ttdef"><b>Definition:</b> <a href="SearchScore_8h_source.xhtml#l00035">SearchScore.h:35</a></div></div>
<div class="ttc" id="classSearch_xhtml"><div class="ttname"><a href="classSearch.xhtml">Search</a></div><div class="ttdoc">Template for optimization methods. </div><div class="ttdef"><b>Definition:</b> <a href="Search_8h_source.xhtml#l00041">Search.h:41</a></div></div>
<div class="ttc" id="classSearchScore_xhtml_a9157d1aa13189eece5b1321c08316220"><div class="ttname"><a href="classSearchScore.xhtml#a9157d1aa13189eece5b1321c08316220">SearchScore::setScore</a></div><div class="ttdeci">void setScore(double score)</div><div class="ttdef"><b>Definition:</b> <a href="SearchScore_8h_source.xhtml#l00070">SearchScore.h:70</a></div></div>
<div class="ttc" id="SearchAlgorithmSelectionPolicy_8h_xhtml"><div class="ttname"><a href="SearchAlgorithmSelectionPolicy_8h.xhtml">SearchAlgorithmSelectionPolicy.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Oct 10 2020 18:30:47 for Treasure Hunt by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
