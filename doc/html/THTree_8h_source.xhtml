<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Treasure Hunt: src/TH/THTree.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TH-logo-2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Treasure Hunt
   </div>
   <div id="projectbrief">Treasure Hunt Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_c1f8c841dbb68f6f1ba9638c450c5e03.xhtml">TH</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">THTree.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="THTree_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef TH_THTREE_H_</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define TH_THTREE_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="structt__node.xhtml">   27</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structt__node.xhtml">t_node</a> {</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">   28</a></span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a> *<a class="code" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">parent</a>;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">   29</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">   30</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">L</a>;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a1fa40826359a9299ee462688e5754378">   31</a></span>&#160;    std::vector&lt;t_node*&gt; <a class="code" href="structt__node.xhtml#a1fa40826359a9299ee462688e5754378">children</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="structt__node.xhtml#aa0855f08d810effb2c62e0003f9a80dc">   35</a></span>&#160;    <a class="code" href="structt__node.xhtml#aa0855f08d810effb2c62e0003f9a80dc">t_node</a>() {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        parent = NULL;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        ID = L = -1;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">   39</a></span>&#160;    std::vector&lt;t_node*&gt;* <a class="code" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">getChildren</a>() {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> &amp;<a class="code" href="structt__node.xhtml#a1fa40826359a9299ee462688e5754378">children</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a3253babb783d6c4f5df3dd441581180d">   43</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#a3253babb783d6c4f5df3dd441581180d">getNChildren</a>() {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> children.size();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structt__node.xhtml#af5fb14150f95112e1e525e09f924f507">   47</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structt__node.xhtml#af5fb14150f95112e1e525e09f924f507">addChildren</a>(<a class="code" href="structt__node.xhtml">t_node</a> *child) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        children.push_back(child);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a97b3fded9e34ad0bf2873695e5813e3d">   51</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structt__node.xhtml#a97b3fded9e34ad0bf2873695e5813e3d">hasChildren</a>() {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> children.size() &gt; 0;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a92a900c7452cca30f4974b4b15326c2c">   55</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structt__node.xhtml#a92a900c7452cca30f4974b4b15326c2c">hasParent</a>() {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span> parent != NULL;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="structt__node.xhtml#ad39388169d7963221a70c4a4af864ac4">   59</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structt__node.xhtml#ad39388169d7963221a70c4a4af864ac4">isLeaf</a>() {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> ! <a class="code" href="structt__node.xhtml#a97b3fded9e34ad0bf2873695e5813e3d">hasChildren</a>();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a8f72af855ca7d42a9680aca399524499">   63</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structt__node.xhtml#a8f72af855ca7d42a9680aca399524499">isRoot</a>() {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> ! <a class="code" href="structt__node.xhtml#a92a900c7452cca30f4974b4b15326c2c">hasParent</a>();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="structt__node.xhtml#aebf69f2d7510e0e746d56146d0ec1b94">   67</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#aebf69f2d7510e0e746d56146d0ec1b94">getID</a>() {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="structt__node.xhtml#ae62cd63088f17a9741dfbbfe0b564690">   71</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structt__node.xhtml#ae62cd63088f17a9741dfbbfe0b564690">setID</a>(<span class="keywordtype">int</span> ID) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        this-&gt;ID = <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">   75</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>() {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">L</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">   79</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">setLevel</a>(<span class="keywordtype">int</span> L) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        this-&gt;L = <a class="code" href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">L</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structt__node.xhtml#ac870573b476905ff91ade58bb9e1b385">   83</a></span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a>* <a class="code" href="structt__node.xhtml#ac870573b476905ff91ade58bb9e1b385">getParent</a>() {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">parent</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="structt__node.xhtml#ab9d6536aceb5dbb33eb76f6d8ab2082b">   87</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structt__node.xhtml#ab9d6536aceb5dbb33eb76f6d8ab2082b">setParent</a>(<a class="code" href="structt__node.xhtml">t_node</a> *parent) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        this-&gt;parent = <a class="code" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">parent</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classTHTree.xhtml">   92</a></span>&#160;<span class="keyword">class </span><a class="code" href="classTHTree.xhtml">THTree</a> {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">bool</span> locked;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">int</span> limitSize, currSize;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">int</span> LRoot;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a> **nodes, *root;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::map&lt;int, t_node*&gt; nodeMap;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">void</span> pack(<a class="code" href="structt__node.xhtml">t_node</a> *node, <span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">L</a>) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        node-&gt;<a class="code" href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">setLevel</a>(L);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">for</span>(<a class="code" href="structt__node.xhtml">t_node</a> *child : *node-&gt;<a class="code" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">getChildren</a>()) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            pack(child, L-1);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">static</span> std::stringstream print_loop(<a class="code" href="structt__node.xhtml">t_node</a> * node) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;[ {&quot;</span> &lt;&lt; node-&gt;<a class="code" href="structt__node.xhtml#aebf69f2d7510e0e746d56146d0ec1b94">getID</a>() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; node-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>() &lt;&lt; <span class="stringliteral">&quot;} &quot;</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">if</span>(node-&gt;<a class="code" href="structt__node.xhtml#a3253babb783d6c4f5df3dd441581180d">getNChildren</a>() &gt; 0) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">for</span>(<a class="code" href="structt__node.xhtml">t_node</a> *child : *node-&gt;<a class="code" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">getChildren</a>()) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                ss &lt;&lt; print_loop(child).str();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;] &quot;</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> ss;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#ab4b3df7eb32c1f34f549e7250af4cecf">  123</a></span>&#160;    <a class="code" href="classTHTree.xhtml#ab4b3df7eb32c1f34f549e7250af4cecf">THTree</a>(<span class="keywordtype">int</span> limitSize) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">if</span>(limitSize &lt;= 0) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;The tree size must be greater than zero.&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        this-&gt;limitSize = limitSize;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        nodes = <span class="keyword">new</span> <a class="code" href="structt__node.xhtml">t_node</a>*[limitSize];</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; limitSize; i++){</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            nodes[i] = <span class="keyword">new</span> <a class="code" href="structt__node.xhtml#aa0855f08d810effb2c62e0003f9a80dc">t_node</a>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        currSize = 0;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        root = NULL;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        LRoot = 1;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        locked = <span class="keyword">false</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#ad74e784c88e5893638f8b7664f593035">  135</a></span>&#160;    <a class="code" href="classTHTree.xhtml#ad74e784c88e5893638f8b7664f593035">~THTree</a>(){</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; limitSize; i++){</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">delete</span> nodes[i];</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">delete</span> nodes;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#afa2f8a119819db01617199497c9327c3">  147</a></span>&#160;    <a class="code" href="classTHTree.xhtml">THTree</a>* <a class="code" href="classTHTree.xhtml#afa2f8a119819db01617199497c9327c3">addRootNode</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">if</span>(locked) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;The tree is locked and cannot be changed.&quot;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span>(root != NULL) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Root node already exists.&quot;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        LRoot = 1;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        root = nodes[0];</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        root-&gt;<a class="code" href="structt__node.xhtml#ae62cd63088f17a9741dfbbfe0b564690">setID</a>(ID);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        root-&gt;<a class="code" href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">setLevel</a>(LRoot);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        nodeMap.insert({<a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>, root});</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        currSize = 1;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">this</span>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a4dd1e98529fdd21abe3ebbb685184ffd">  165</a></span>&#160;    <a class="code" href="classTHTree.xhtml">THTree</a>* <a class="code" href="classTHTree.xhtml#a4dd1e98529fdd21abe3ebbb685184ffd">addNode</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>, <span class="keywordtype">int</span> parentID) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>(locked) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;The tree is locked and cannot be changed.&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span>(currSize &gt;= limitSize) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Tree limit size reached.&quot;</span>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a> *<a class="code" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">parent</a> = nodeMap.at(parentID);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span>(parent == NULL) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid parent node.&quot;</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a> *currNode = nodes[currSize];</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        currNode-&gt;<a class="code" href="structt__node.xhtml#ab9d6536aceb5dbb33eb76f6d8ab2082b">setParent</a>(parent);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        currNode-&gt;<a class="code" href="structt__node.xhtml#ae62cd63088f17a9741dfbbfe0b564690">setID</a>(ID);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        currNode-&gt;<a class="code" href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">setLevel</a>(parent-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>() + 1);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span>(currNode-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>() &gt; LRoot) LRoot = currNode-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        nodeMap.insert({<a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>, currNode});</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        parent-&gt;<a class="code" href="structt__node.xhtml#af5fb14150f95112e1e525e09f924f507">addChildren</a>(currNode);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        currSize++;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">this</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a839ab9db010c87b20c1ba76a79f71b70">  187</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classTHTree.xhtml#a839ab9db010c87b20c1ba76a79f71b70">lock</a>(){</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        locked = <span class="keyword">true</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Pack the tree level.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span>(root-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>() != LRoot) pack(root, LRoot);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a711df30e7dd52b8f5055a1757bbe0e02">  193</a></span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a>* <a class="code" href="classTHTree.xhtml#a711df30e7dd52b8f5055a1757bbe0e02">getRootNode</a>() {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span> root;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a4f17fef67dc2141d2fec2493e3856bf8">  197</a></span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a>* <a class="code" href="classTHTree.xhtml#a4f17fef67dc2141d2fec2493e3856bf8">getNode</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">return</span> nodeMap.at(ID);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#acb72d0655f52443fb9e28a1deaf6c317">  201</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classTHTree.xhtml#acb72d0655f52443fb9e28a1deaf6c317">getRootLevel</a>() {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">return</span> LRoot;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a790b7da1235d0ff11cbc75b512783ca9">  205</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classTHTree.xhtml#a790b7da1235d0ff11cbc75b512783ca9">getLevel</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a>* node = getNode(ID);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span>(node != NULL) <span class="keywordflow">return</span> node-&gt;<a class="code" href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">getLevel</a>();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a55e0aa391cbe6e293ed811b26fd4f380">  211</a></span>&#160;    <a class="code" href="structt__node.xhtml">t_node</a>* <a class="code" href="classTHTree.xhtml#a55e0aa391cbe6e293ed811b26fd4f380">getParent</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a>* node = getNode(ID);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">if</span>(node != NULL) <span class="keywordflow">return</span> node-&gt;<a class="code" href="structt__node.xhtml#ac870573b476905ff91ade58bb9e1b385">getParent</a>();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a6c74633149823f9a6a7ecec871e046d0">  217</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classTHTree.xhtml#a6c74633149823f9a6a7ecec871e046d0">getParentID</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a>* <a class="code" href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">parent</a> = <a class="code" href="structt__node.xhtml#ac870573b476905ff91ade58bb9e1b385">getParent</a>(ID);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">if</span>(parent != NULL) <span class="keywordflow">return</span> parent-&gt;<a class="code" href="structt__node.xhtml#aebf69f2d7510e0e746d56146d0ec1b94">getID</a>();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#ae06947b1148e37c9ffd60081f190be31">  223</a></span>&#160;    std::vector&lt;t_node*&gt;* <a class="code" href="classTHTree.xhtml#ae06947b1148e37c9ffd60081f190be31">getChildren</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>) {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="structt__node.xhtml">t_node</a>* node = getNode(ID);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">if</span>(node != NULL) <span class="keywordflow">return</span> node-&gt;<a class="code" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">getChildren</a>();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a8f5c9a86c21356c7072981e7fda37459">  229</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classTHTree.xhtml#a8f5c9a86c21356c7072981e7fda37459">getChildrenIDs</a>(<span class="keywordtype">int</span> <a class="code" href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">ID</a>, std::vector&lt;int&gt;* IDs) {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">if</span>(IDs == NULL) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        std::vector&lt;t_node*&gt; *<a class="code" href="structt__node.xhtml#a1fa40826359a9299ee462688e5754378">children</a> = <a class="code" href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">getChildren</a>(ID);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">for</span>(<a class="code" href="structt__node.xhtml">t_node</a>* child : *children) {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            IDs-&gt;push_back(child-&gt;getID());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#a13af8833607e6a6968d77c2a142e7c6f">  241</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classTHTree.xhtml#a13af8833607e6a6968d77c2a142e7c6f">getCurrentSize</a>() {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> currSize;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#afeb65f2df9bf539f4ca705eca32411f8">  245</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classTHTree.xhtml#afeb65f2df9bf539f4ca705eca32411f8">print</a>() {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        print(root);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classTHTree.xhtml#aa98e891ad17c97426d77a80914dfd775">  249</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classTHTree.xhtml#aa98e891ad17c97426d77a80914dfd775">print</a>(<a class="code" href="structt__node.xhtml">t_node</a> * node) {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        cout &lt;&lt; print_loop(node).str().c_str() &lt;&lt; endl;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* TH_THTREE_H_ */</span><span class="preprocessor"></span></div><div class="ttc" id="structt__node_xhtml"><div class="ttname"><a href="structt__node.xhtml">t_node</a></div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00027">THTree.h:27</a></div></div>
<div class="ttc" id="structt__node_xhtml_a4fe63274d162dcffb5ff14c848d19883"><div class="ttname"><a href="structt__node.xhtml#a4fe63274d162dcffb5ff14c848d19883">t_node::setLevel</a></div><div class="ttdeci">void setLevel(int L)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00079">THTree.h:79</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a4f17fef67dc2141d2fec2493e3856bf8"><div class="ttname"><a href="classTHTree.xhtml#a4f17fef67dc2141d2fec2493e3856bf8">THTree::getNode</a></div><div class="ttdeci">t_node * getNode(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00197">THTree.h:197</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a790b7da1235d0ff11cbc75b512783ca9"><div class="ttname"><a href="classTHTree.xhtml#a790b7da1235d0ff11cbc75b512783ca9">THTree::getLevel</a></div><div class="ttdeci">int getLevel(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00205">THTree.h:205</a></div></div>
<div class="ttc" id="classTHTree_xhtml_acb72d0655f52443fb9e28a1deaf6c317"><div class="ttname"><a href="classTHTree.xhtml#acb72d0655f52443fb9e28a1deaf6c317">THTree::getRootLevel</a></div><div class="ttdeci">int getRootLevel()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00201">THTree.h:201</a></div></div>
<div class="ttc" id="structt__node_xhtml_a7221b5dfc9d6710d7ffbaf59acd916de"><div class="ttname"><a href="structt__node.xhtml#a7221b5dfc9d6710d7ffbaf59acd916de">t_node::getChildren</a></div><div class="ttdeci">std::vector&lt; t_node * &gt; * getChildren()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00039">THTree.h:39</a></div></div>
<div class="ttc" id="structt__node_xhtml_a1fa40826359a9299ee462688e5754378"><div class="ttname"><a href="structt__node.xhtml#a1fa40826359a9299ee462688e5754378">t_node::children</a></div><div class="ttdeci">std::vector&lt; t_node * &gt; children</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00031">THTree.h:31</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a4dd1e98529fdd21abe3ebbb685184ffd"><div class="ttname"><a href="classTHTree.xhtml#a4dd1e98529fdd21abe3ebbb685184ffd">THTree::addNode</a></div><div class="ttdeci">THTree * addNode(int ID, int parentID)</div><div class="ttdoc">Add a child node to the tree topology. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00165">THTree.h:165</a></div></div>
<div class="ttc" id="structt__node_xhtml_a8f72af855ca7d42a9680aca399524499"><div class="ttname"><a href="structt__node.xhtml#a8f72af855ca7d42a9680aca399524499">t_node::isRoot</a></div><div class="ttdeci">bool isRoot()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00063">THTree.h:63</a></div></div>
<div class="ttc" id="structt__node_xhtml_a969f3a8447460a76d0aaf85648a02150"><div class="ttname"><a href="structt__node.xhtml#a969f3a8447460a76d0aaf85648a02150">t_node::L</a></div><div class="ttdeci">int L</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00030">THTree.h:30</a></div></div>
<div class="ttc" id="structt__node_xhtml_af5fb14150f95112e1e525e09f924f507"><div class="ttname"><a href="structt__node.xhtml#af5fb14150f95112e1e525e09f924f507">t_node::addChildren</a></div><div class="ttdeci">void addChildren(t_node *child)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00047">THTree.h:47</a></div></div>
<div class="ttc" id="structt__node_xhtml_a37f4377e664f4b4a8b541df91e35d27b"><div class="ttname"><a href="structt__node.xhtml#a37f4377e664f4b4a8b541df91e35d27b">t_node::getLevel</a></div><div class="ttdeci">int getLevel()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00075">THTree.h:75</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a711df30e7dd52b8f5055a1757bbe0e02"><div class="ttname"><a href="classTHTree.xhtml#a711df30e7dd52b8f5055a1757bbe0e02">THTree::getRootNode</a></div><div class="ttdeci">t_node * getRootNode()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00193">THTree.h:193</a></div></div>
<div class="ttc" id="classTHTree_xhtml_afeb65f2df9bf539f4ca705eca32411f8"><div class="ttname"><a href="classTHTree.xhtml#afeb65f2df9bf539f4ca705eca32411f8">THTree::print</a></div><div class="ttdeci">void print()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00245">THTree.h:245</a></div></div>
<div class="ttc" id="structt__node_xhtml_a97b3fded9e34ad0bf2873695e5813e3d"><div class="ttname"><a href="structt__node.xhtml#a97b3fded9e34ad0bf2873695e5813e3d">t_node::hasChildren</a></div><div class="ttdeci">bool hasChildren()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00051">THTree.h:51</a></div></div>
<div class="ttc" id="structt__node_xhtml_ad39388169d7963221a70c4a4af864ac4"><div class="ttname"><a href="structt__node.xhtml#ad39388169d7963221a70c4a4af864ac4">t_node::isLeaf</a></div><div class="ttdeci">bool isLeaf()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00059">THTree.h:59</a></div></div>
<div class="ttc" id="structt__node_xhtml_aebf69f2d7510e0e746d56146d0ec1b94"><div class="ttname"><a href="structt__node.xhtml#aebf69f2d7510e0e746d56146d0ec1b94">t_node::getID</a></div><div class="ttdeci">int getID()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00067">THTree.h:67</a></div></div>
<div class="ttc" id="classTHTree_xhtml"><div class="ttname"><a href="classTHTree.xhtml">THTree</a></div><div class="ttdoc">Treasure Hunt Tree Topology. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00092">THTree.h:92</a></div></div>
<div class="ttc" id="structt__node_xhtml_a3253babb783d6c4f5df3dd441581180d"><div class="ttname"><a href="structt__node.xhtml#a3253babb783d6c4f5df3dd441581180d">t_node::getNChildren</a></div><div class="ttdeci">int getNChildren()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00043">THTree.h:43</a></div></div>
<div class="ttc" id="structt__node_xhtml_ab9d6536aceb5dbb33eb76f6d8ab2082b"><div class="ttname"><a href="structt__node.xhtml#ab9d6536aceb5dbb33eb76f6d8ab2082b">t_node::setParent</a></div><div class="ttdeci">void setParent(t_node *parent)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00087">THTree.h:87</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a839ab9db010c87b20c1ba76a79f71b70"><div class="ttname"><a href="classTHTree.xhtml#a839ab9db010c87b20c1ba76a79f71b70">THTree::lock</a></div><div class="ttdeci">void lock()</div><div class="ttdoc">Lock this THTree topology for any further change. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00187">THTree.h:187</a></div></div>
<div class="ttc" id="structt__node_xhtml_aa0855f08d810effb2c62e0003f9a80dc"><div class="ttname"><a href="structt__node.xhtml#aa0855f08d810effb2c62e0003f9a80dc">t_node::t_node</a></div><div class="ttdeci">t_node()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00035">THTree.h:35</a></div></div>
<div class="ttc" id="structt__node_xhtml_ad9c1c64db61864861f59b1c6afb74bc0"><div class="ttname"><a href="structt__node.xhtml#ad9c1c64db61864861f59b1c6afb74bc0">t_node::ID</a></div><div class="ttdeci">int ID</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00029">THTree.h:29</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a55e0aa391cbe6e293ed811b26fd4f380"><div class="ttname"><a href="classTHTree.xhtml#a55e0aa391cbe6e293ed811b26fd4f380">THTree::getParent</a></div><div class="ttdeci">t_node * getParent(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00211">THTree.h:211</a></div></div>
<div class="ttc" id="structt__node_xhtml_a92a900c7452cca30f4974b4b15326c2c"><div class="ttname"><a href="structt__node.xhtml#a92a900c7452cca30f4974b4b15326c2c">t_node::hasParent</a></div><div class="ttdeci">bool hasParent()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00055">THTree.h:55</a></div></div>
<div class="ttc" id="classTHTree_xhtml_ab4b3df7eb32c1f34f549e7250af4cecf"><div class="ttname"><a href="classTHTree.xhtml#ab4b3df7eb32c1f34f549e7250af4cecf">THTree::THTree</a></div><div class="ttdeci">THTree(int limitSize)</div><div class="ttdoc">Constructor to create a tree topology with a fixed number of nodes. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00123">THTree.h:123</a></div></div>
<div class="ttc" id="structt__node_xhtml_ae62cd63088f17a9741dfbbfe0b564690"><div class="ttname"><a href="structt__node.xhtml#ae62cd63088f17a9741dfbbfe0b564690">t_node::setID</a></div><div class="ttdeci">void setID(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00071">THTree.h:71</a></div></div>
<div class="ttc" id="classTHTree_xhtml_ad74e784c88e5893638f8b7664f593035"><div class="ttname"><a href="classTHTree.xhtml#ad74e784c88e5893638f8b7664f593035">THTree::~THTree</a></div><div class="ttdeci">~THTree()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00135">THTree.h:135</a></div></div>
<div class="ttc" id="structt__node_xhtml_ac870573b476905ff91ade58bb9e1b385"><div class="ttname"><a href="structt__node.xhtml#ac870573b476905ff91ade58bb9e1b385">t_node::getParent</a></div><div class="ttdeci">t_node * getParent()</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00083">THTree.h:83</a></div></div>
<div class="ttc" id="structt__node_xhtml_a5a23987dec53ba900f26d5a3b031b2f0"><div class="ttname"><a href="structt__node.xhtml#a5a23987dec53ba900f26d5a3b031b2f0">t_node::parent</a></div><div class="ttdeci">t_node * parent</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00028">THTree.h:28</a></div></div>
<div class="ttc" id="classTHTree_xhtml_afa2f8a119819db01617199497c9327c3"><div class="ttname"><a href="classTHTree.xhtml#afa2f8a119819db01617199497c9327c3">THTree::addRootNode</a></div><div class="ttdeci">THTree * addRootNode(int ID)</div><div class="ttdoc">Add the Root node to the tree topology. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00147">THTree.h:147</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a13af8833607e6a6968d77c2a142e7c6f"><div class="ttname"><a href="classTHTree.xhtml#a13af8833607e6a6968d77c2a142e7c6f">THTree::getCurrentSize</a></div><div class="ttdeci">int getCurrentSize()</div><div class="ttdoc">Get the tree topology size. </div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00241">THTree.h:241</a></div></div>
<div class="ttc" id="classTHTree_xhtml_ae06947b1148e37c9ffd60081f190be31"><div class="ttname"><a href="classTHTree.xhtml#ae06947b1148e37c9ffd60081f190be31">THTree::getChildren</a></div><div class="ttdeci">std::vector&lt; t_node * &gt; * getChildren(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00223">THTree.h:223</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a6c74633149823f9a6a7ecec871e046d0"><div class="ttname"><a href="classTHTree.xhtml#a6c74633149823f9a6a7ecec871e046d0">THTree::getParentID</a></div><div class="ttdeci">int getParentID(int ID)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00217">THTree.h:217</a></div></div>
<div class="ttc" id="classTHTree_xhtml_a8f5c9a86c21356c7072981e7fda37459"><div class="ttname"><a href="classTHTree.xhtml#a8f5c9a86c21356c7072981e7fda37459">THTree::getChildrenIDs</a></div><div class="ttdeci">void getChildrenIDs(int ID, std::vector&lt; int &gt; *IDs)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00229">THTree.h:229</a></div></div>
<div class="ttc" id="classTHTree_xhtml_aa98e891ad17c97426d77a80914dfd775"><div class="ttname"><a href="classTHTree.xhtml#aa98e891ad17c97426d77a80914dfd775">THTree::print</a></div><div class="ttdeci">static void print(t_node *node)</div><div class="ttdef"><b>Definition:</b> <a href="THTree_8h_source.xhtml#l00249">THTree.h:249</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Oct 7 2020 13:08:19 for Treasure Hunt by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
