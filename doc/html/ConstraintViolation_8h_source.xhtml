<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Treasure Hunt: src/TH/ConstraintViolation.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TH-logo-2.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Treasure Hunt
   </div>
   <div id="projectbrief">Treasure Hunt Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_c1f8c841dbb68f6f1ba9638c450c5e03.xhtml">TH</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ConstraintViolation.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ConstraintViolation_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef CONSTRAINTVIOLATIONS_H_</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define CONSTRAINTVIOLATIONS_H_</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> V = <span class="keywordtype">double</span>, <span class="keywordtype">int</span> vSize = 1&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml">   36</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structConstraintViolation.xhtml">ConstraintViolation</a> {</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">   37</a></span>&#160;    V <a class="code" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">internalViolations</a>[vSize];</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">   38</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a> = vSize;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">   40</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">checkCompatibility</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> *violation) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span>(violation == NULL) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Violation can not be empty.&quot;</span>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">if</span>(size != violation-&gt;<a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Violation&#39;s internal size is not compatible.&quot;</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">   55</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">operator =</a>(V *buffer) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> (buffer == NULL) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>; i++){</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            internalViolations[i] = buffer[i];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#aab52761d8cbde42604d5539d90990876">   70</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">operator =</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> *violation){</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">checkCompatibility</a>(violation);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        *<span class="keyword">this</span> = violation-&gt;<a class="code" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">internalViolations</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a303559f871c792bbf9611b64e48918b9">   83</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">operator =</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> &amp;violation){</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">checkCompatibility</a>(&amp;violation);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        *<span class="keyword">this</span> = violation.<a class="code" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">internalViolations</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#ade5d301bab412f21e9d1e0483af19412">   93</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">operator =</a>(V value) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>; i++){</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            internalViolations[i] = value;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">  105</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(V *buffer){</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(buffer == NULL) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>; i++){</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">if</span>(this-&gt;internalViolations[i] != buffer[i]) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#ae3f2f69ecc051cde999037c6c7cce276">  122</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#ae3f2f69ecc051cde999037c6c7cce276">equals</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> *violation){</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <a class="code" href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">checkCompatibility</a>(violation);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(violation-&gt;<a class="code" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">internalViolations</a>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a4924e949e9aee8e84cdafea54f2851b9">  126</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#a4924e949e9aee8e84cdafea54f2851b9">operator ==</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> *violation){</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span> violation != NULL &amp;&amp; <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(violation);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#aa1e045de24917458b5414675d1473d3d">  129</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#a4924e949e9aee8e84cdafea54f2851b9">operator ==</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> &amp;violation){</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> violation != NULL &amp;&amp; <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(&amp;violation);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#abd1a4af7bc87614609e83b69e43732ff">  132</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#abd1a4af7bc87614609e83b69e43732ff">operator !=</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> *violation){</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> violation == NULL || ! <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(violation);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a746b126ea8c52c2e8cf479280ba28d56">  135</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structConstraintViolation.xhtml#abd1a4af7bc87614609e83b69e43732ff">operator !=</a>(<a class="code" href="structConstraintViolation.xhtml">ConstraintViolation&lt;V, vSize&gt;</a> &amp;violation){</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> violation == NULL || ! <a class="code" href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">equals</a>(&amp;violation);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a28a71d2bb7a090f92824ae6dadcec646">  144</a></span>&#160;    V <a class="code" href="structConstraintViolation.xhtml#a28a71d2bb7a090f92824ae6dadcec646">getInternalViolation</a>(<span class="keywordtype">int</span> i){</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span>(i &lt; 0 || i &gt;= vSize) <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid index for internal violation.&quot;</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> internalViolations[i];</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a2cd06f4514a4ebda42d90b3b9b1a6612">  153</a></span>&#160;    V* <a class="code" href="structConstraintViolation.xhtml#a2cd06f4514a4ebda42d90b3b9b1a6612">getInternalViolation</a>(){ <span class="keywordflow">return</span> <a class="code" href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">internalViolations</a>; }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a78e2b3eb94fc78b767c689e7376228a9">  160</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structConstraintViolation.xhtml#a78e2b3eb94fc78b767c689e7376228a9">getInternalViolation</a>(V *buffer) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>(buffer == NULL) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>; i++){</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            buffer[i] = internalViolations[i];</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a2d26f6240dd7f4b29f63bd47110fce6b">  175</a></span>&#160;    V <a class="code" href="structConstraintViolation.xhtml#a2d26f6240dd7f4b29f63bd47110fce6b">getFirstValue</a>(){ <span class="keywordflow">return</span> internalViolations[0]; }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="structConstraintViolation.xhtml#a08e4988745e7389af2f276ead22600ee">  181</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structConstraintViolation.xhtml#a08e4988745e7389af2f276ead22600ee">getViolationSize</a>() { <span class="keywordflow">return</span> <a class="code" href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">size</a>; }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* CONSTRAINTVIOLATIONS_H_ */</span><span class="preprocessor"></span></div><div class="ttc" id="structConstraintViolation_xhtml_a2d26f6240dd7f4b29f63bd47110fce6b"><div class="ttname"><a href="structConstraintViolation.xhtml#a2d26f6240dd7f4b29f63bd47110fce6b">ConstraintViolation::getFirstValue</a></div><div class="ttdeci">V getFirstValue()</div><div class="ttdoc">Get the first value from the list of values that represents the ConstraintViolation. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00175">ConstraintViolation.h:175</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a2b1b8e70ce695b7d99cc2b31eb6a0cd9"><div class="ttname"><a href="structConstraintViolation.xhtml#a2b1b8e70ce695b7d99cc2b31eb6a0cd9">ConstraintViolation::size</a></div><div class="ttdeci">int size</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00038">ConstraintViolation.h:38</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a4924e949e9aee8e84cdafea54f2851b9"><div class="ttname"><a href="structConstraintViolation.xhtml#a4924e949e9aee8e84cdafea54f2851b9">ConstraintViolation::operator==</a></div><div class="ttdeci">bool operator==(ConstraintViolation&lt; V, vSize &gt; *violation)</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00126">ConstraintViolation.h:126</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a2cd06f4514a4ebda42d90b3b9b1a6612"><div class="ttname"><a href="structConstraintViolation.xhtml#a2cd06f4514a4ebda42d90b3b9b1a6612">ConstraintViolation::getInternalViolation</a></div><div class="ttdeci">V * getInternalViolation()</div><div class="ttdoc">Get a pointer to the actual list of values that represents the ConstraintViolation. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00153">ConstraintViolation.h:153</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a82ebcbfe61ca8adcf6f7b613c4c69f8d"><div class="ttname"><a href="structConstraintViolation.xhtml#a82ebcbfe61ca8adcf6f7b613c4c69f8d">ConstraintViolation::checkCompatibility</a></div><div class="ttdeci">void checkCompatibility(ConstraintViolation&lt; V, vSize &gt; *violation)</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00040">ConstraintViolation.h:40</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_ac761fb762b35acd21469b3c088be7774"><div class="ttname"><a href="structConstraintViolation.xhtml#ac761fb762b35acd21469b3c088be7774">ConstraintViolation::internalViolations</a></div><div class="ttdeci">V internalViolations[vSize]</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00037">ConstraintViolation.h:37</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a78e2b3eb94fc78b767c689e7376228a9"><div class="ttname"><a href="structConstraintViolation.xhtml#a78e2b3eb94fc78b767c689e7376228a9">ConstraintViolation::getInternalViolation</a></div><div class="ttdeci">void getInternalViolation(V *buffer)</div><div class="ttdoc">This method copies the contents of current ConstraintViolation to the buffer received. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00160">ConstraintViolation.h:160</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml"><div class="ttname"><a href="structConstraintViolation.xhtml">ConstraintViolation</a></div><div class="ttdoc">This structure represents the constraints violated by one Solution. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00036">ConstraintViolation.h:36</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_ae3f2f69ecc051cde999037c6c7cce276"><div class="ttname"><a href="structConstraintViolation.xhtml#ae3f2f69ecc051cde999037c6c7cce276">ConstraintViolation::equals</a></div><div class="ttdeci">bool equals(ConstraintViolation&lt; V, vSize &gt; *violation)</div><div class="ttdoc">Compares the current list of constraint violations with the ConstraintViolation instance received...</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00122">ConstraintViolation.h:122</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a28a71d2bb7a090f92824ae6dadcec646"><div class="ttname"><a href="structConstraintViolation.xhtml#a28a71d2bb7a090f92824ae6dadcec646">ConstraintViolation::getInternalViolation</a></div><div class="ttdeci">V getInternalViolation(int i)</div><div class="ttdoc">Get a constraint violation based on its index in the list of violations. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00144">ConstraintViolation.h:144</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a163197175eff749bf4b026c076961120"><div class="ttname"><a href="structConstraintViolation.xhtml#a163197175eff749bf4b026c076961120">ConstraintViolation::equals</a></div><div class="ttdeci">bool equals(V *buffer)</div><div class="ttdoc">Compares the current list of constraint violations with the buffer received. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00105">ConstraintViolation.h:105</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_abd1a4af7bc87614609e83b69e43732ff"><div class="ttname"><a href="structConstraintViolation.xhtml#abd1a4af7bc87614609e83b69e43732ff">ConstraintViolation::operator!=</a></div><div class="ttdeci">bool operator!=(ConstraintViolation&lt; V, vSize &gt; *violation)</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00132">ConstraintViolation.h:132</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a08e4988745e7389af2f276ead22600ee"><div class="ttname"><a href="structConstraintViolation.xhtml#a08e4988745e7389af2f276ead22600ee">ConstraintViolation::getViolationSize</a></div><div class="ttdeci">int getViolationSize()</div><div class="ttdoc">Get the number of values that represents a ConstraintViolation. </div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00181">ConstraintViolation.h:181</a></div></div>
<div class="ttc" id="structConstraintViolation_xhtml_a2bfd655f35c83bb9ef8b01102163f519"><div class="ttname"><a href="structConstraintViolation.xhtml#a2bfd655f35c83bb9ef8b01102163f519">ConstraintViolation::operator=</a></div><div class="ttdeci">void operator=(V *buffer)</div><div class="ttdoc">Operator that assigns the values of a buffer to the list that represents the current ConstraintViolat...</div><div class="ttdef"><b>Definition:</b> <a href="ConstraintViolation_8h_source.xhtml#l00055">ConstraintViolation.h:55</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Oct 10 2020 18:33:31 for Treasure Hunt by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
